Key,Value
ADC,"['extern unsigned char _addcarry_u8(unsigned char c_in, unsigned char src1, unsigned char src2, unsigned char *sum_out);']"
unsigned,"['char _addcarryx_u32 (unsigned char c_in, unsigned int src1, unsigned int src2, unsigned int *sum_out);', 'char _addcarryx_u32 (unsigned char c_in, unsigned int src1, unsigned int src2, unsigned int *sum_out);', 'int _mm_crc32_u8( unsigned int crc, unsigned char data )']"
VADDPD,"['__m512d _mm512_add_pd (__m512d a, __m512d b);']"
VADDPS,"['__m512 _mm512_add_ps (__m512 a, __m512 b);']"
VADDSD,"['__m128d _mm_mask_add_sd (__m128d s, __mmask8 k, __m128d a, __m128d b);']"
VADDSS,"['__m128 _mm_mask_add_ss (__m128 s, __mmask8 k, __m128 a, __m128 b);']"
ADDSUBPD,"['__m128d _mm_addsub_pd(__m128d a, __m128d b)']"
ADDSUBPS,"['__m128 _mm_addsub_ps(__m128 a, __m128 b)']"
(V)AESDEC,"['__m128i _mm_aesdec (__m128i, __m128i)']"
AESDEC128KL,"['unsigned char _mm_aesdec128kl_u8(__m128i* odata, __m128i idata, const void* h);']"
AESDEC256KL,"['unsigned char _mm_aesdec256kl_u8(__m128i* odata, __m128i idata, const void* h);']"
(V)AESDECLAST,"['__m128i _mm_aesdeclast (__m128i, __m128i)']"
AESDECWIDE128KLunsigned,"['char _mm_aesdecwide128kl_u8(__m128i odata[8], const __m128i idata[8], const void* h);']"
AESDECWIDE256KLunsigned,"['char _mm_aesdecwide256kl_u8(__m128i odata[8], const __m128i idata[8], const void* h);']"
(V)AESENC,"['__m128i _mm_aesenc (__m128i, __m128i)']"
AESENC128KL,"['unsigned char _mm_aesenc128kl_u8(__m128i* odata, __m128i idata, const void* h);']"
AESENC256KL,"['unsigned char _mm_aesenc256kl_u8(__m128i* odata, __m128i idata, const void* h);']"
(V)AESENCLAST,"['__m128i _mm_aesenclast (__m128i, __m128i)']"
AESENCWIDE128KLunsigned,"['char _mm_aesencwide128kl_u8(__m128i odata[8], const __m128i idata[8], const void* h);']"
AESENCWIDE256KLunsigned,"['char _mm_aesencwide256kl_u8(__m128i odata[8], const __m128i idata[8], const void* h);']"
(V)AESIMC,['__m128i _mm_aesimc (__m128i)']
(V)AESKEYGENASSIST,"['__m128i _mm_aeskeygenassist (__m128i, const int)']"
VANDNPD,"['__m512d _mm512_andnot_pd (__m512d a, __m512d b);']"
VANDNPS,"['__m512 _mm512_andnot_ps (__m512 a, __m512 b);']"
VANDPD,"['__m512d _mm512_and_pd (__m512d a, __m512d b);']"
VANDPS,"['__m512 _mm512_and_ps (__m512 a, __m512 b);']"
BEXTR,"['unsigned __int32 _bextr_u32(unsigned __int32 src, unsigned __int32 start. unsigned __int32 len);']"
BLENDPD,"['__m128d _mm_blend_pd (__m128d v1, __m128d v2, const int mask);']"
BLENDPS,"['__m128 _mm_blend_ps (__m128 v1, __m128 v2, const int mask);']"
BLENDVPD,"['__m128d _mm_blendv_pd(__m128d v1, __m128d v2, __m128d v3);']"
BLENDVPS,"['__m128 _mm_blendv_ps(__m128 v1, __m128 v2, __m128 v3);']"
BLSI,['unsigned __int32 _blsi_u32(unsigned __int32 src);']
BLSMSK,['unsigned __int32 _blsmsk_u32(unsigned __int32 src);']
BLSR,['unsigned __int32 _blsr_u32(unsigned __int32 src);']
BNDCL,['void _bnd_chk_ptr_lbounds(const void *q)']
BNDCU,"['.void _bnd_chk_ptr_ubounds(const void *q)', '.void _bnd_chk_ptr_ubounds(const void *q)']"
BNDLDX:,['Generated by compiler as needed.']
BNDMKvoid,"['* _bnd_set_ptr_bounds(const void * q, size_t size);']"
BNDMOV,"['void * _bnd_copy_ptr_bounds(const void *q, const void *r)']"
BNDSTX:,"['_bnd_store_ptr_bounds(const void **ptr_addr, const void *ptr_val);']"
BZHI,"['unsigned __int32 _bzhi_u32(unsigned __int32 src, unsigned __int32 index);']"
CLDEMOTE,['void _cldemote(const void*);']
CLFLUSH,['void _mm_clflush(void const *p)']
CLFLUSHOPT,['void _mm_clflushopt(void const *p)']
CLWB,['void _mm_clwb(void const *p);']
VCMPPD,"['__mmask8 _mm512_cmp_pd_mask( __m512d a, __m512d b, int imm);']"
VCMPPS,"['__mmask16 _mm512_cmp_ps_mask( __m512 a, __m512 b, int imm);']"
VCMPSD,"['__mmask8 _mm_cmp_sd_mask( __m128d a, __m128d b, int imm);']"
VCMPSS,"['__mmask8 _mm_cmp_ss_mask( __m128 a, __m128 b, int imm);']"
VCOMISD,"['int _mm_comi_round_sd(__m128d a, __m128d b, int imm, int sae);']"
VCOMISS,"['int _mm_comi_round_ss(__m128 a, __m128 b, int imm, int sae);']"
VCVTDQ2PD,['__m512d _mm512_cvtepi32_pd( __m256i a);']
VCVTDQ2PS,['__m512 _mm512_cvtepi32_ps( __m512i a);']
VCVTPD2DQ,['__m256i _mm512_cvtpd_epi32( __m512d a);']
CVTPD1PI,['__m64 _mm_cvtpd_pi32(__m128d a)']
VCVTPD2PS,['__m256 _mm512_cvtpd_ps( __m512d a);']
CVTPI2PD,['__m128d _mm_cvtpi32_pd(__m64 a)']
CVTPI2PS,"['__m128 _mm_cvtpi32_ps(__m128 a, __m64 b)']"
VCVTPS2DQ,['__m512i _mm512_cvtps_epi32( __m512 a);']
VCVTPS2PD,['__m512d _mm512_cvtps_pd( __m256 a);']
CVTPS2PI,['__m64 _mm_cvtps_pi32(__m128 a)']
VCVTSD2SI,['int _mm_cvtsd_i32(__m128d);']
VCVTSD2SS,"['__m128 _mm_mask_cvtsd_ss(__m128 s, __mmask8 k, __m128 a, __m128d b);']"
VCVTSI2SD,"['__m128d _mm_cvti32_sd(__m128d s, int a);']"
VCVTSI2SS,"['__m128 _mm_cvti32_ss(__m128 s, int a);']"
VCVTSS2SD,"['__m128d _mm_cvt_roundss_sd(__m128d a, __m128 b, int r);']"
VCVTSS2SI,['int _mm_cvtss_i32( __m128 a);']
VCVTTPD2DQ,['__m256i _mm512_cvttpd_epi32( __m512d a);']
CVTTPD1PI,['__m64 _mm_cvttpd_pi32(__m128d a)']
VCVTTPS2DQ,['__m512i _mm512_cvttps_epi32( __m512 a);']
CVTTPS2PI,['__m64 _mm_cvttps_pi32(__m128 a)']
VCVTTSD2SI,['int _mm_cvttsd_i32( __m128d a);']
VCVTTSS2SI,['int _mm_cvttss_i32( __m128 a);']
VDIVPD,"['__m512d _mm512_div_pd( __m512d a, __m512d b);']"
VDIVPS,"['__m512 _mm512_div_ps( __m512 a, __m512 b);']"
VDIVSD,"['__m128d _mm_mask_div_sd(__m128d s, __mmask8 k, __m128d a, __m128d b);']"
VDIVSS,"['__m128 _mm_mask_div_ss(__m128 s, __mmask8 k, __m128 a, __m128 b);']"
DPPD,"['__m128d _mm_dp_pd ( __m128d a, __m128d b, const int mask);']"
(V)DPPS,"['__m128 _mm_dp_ps ( __m128 a, __m128 b, const int mask);']"
void,"['_mm_empty()', '_mm_lfence(void)', '_mm_maskmoveu_si128(__m128i d, __m128i n, char * p)', '_mm_maskmove_si64(__m64d, __m64n, char * p)', '_mm_mfence(void)', '_m_prefetchw( void * );', '_mm_prefetch(char *p, int i)', '_mm_sfence(void)']"
ENCODEKEY128,"['unsigned int _mm_encodekey128_u32(unsigned int htype, __m128i key, void* h);']"
ENCODEKEY256,"['unsigned int _mm_encodekey256_u32(unsigned int htype, __m128i key_lo, __m128i key_hi, void* h);']"
EXTRACTPS,"['int _mm_extract_ps (__m128 a, const int nidx);']"
VHADDPD,"['__m256d _mm256_hadd_pd (__m256d a, __m256d b);']"
HADDPS,"['__m128 _mm_hadd_ps (__m128 a, __m128 b);']"
HSUBPD,"['__m128d _mm_hsub_pd(__m128d a, __m128d b)']"
HSUBPS,"['__m128 _mm_hsub_ps(__m128 a, __m128 b);']"
INCSSPD,"['void _incsspd(int);', 'void _incsspd(int);']"
VINSERTPS,"['__m128 _mm_insert_ps(__m128 dst, __m128 src, const int nidx);']"
INVPCID,"['void _invpcid(unsigned __int32 type, void * descriptor);']"
KADDW,"['__mmask16 _kadd_mask16 (__mmask16 a, __mmask16 b);', '__mmask16 _kadd_mask16 (__mmask16 a, __mmask16 b);', '__mmask16 _kadd_mask16 (__mmask16 a, __mmask16 b);', '__mmask16 _kadd_mask16 (__mmask16 a, __mmask16 b);']"
KANDW,"['__mmask16 _mm512_kand(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kand(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kand(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kand(__mmask16 a, __mmask16 b);']"
KANDNW,"['__mmask16 _mm512_kandn(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kandn(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kandn(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kandn(__mmask16 a, __mmask16 b);']"
KMOVW,"['__mmask16 _mm512_kmov(__mmask16 a);', '__mmask16 _mm512_kmov(__mmask16 a);', '__mmask16 _mm512_kmov(__mmask16 a);', '__mmask16 _mm512_kmov(__mmask16 a);']"
KNOTW,"['__mmask16 _mm512_knot(__mmask16 a);', '__mmask16 _mm512_knot(__mmask16 a);', '__mmask16 _mm512_knot(__mmask16 a);', '__mmask16 _mm512_knot(__mmask16 a);']"
KORW,"['__mmask16 _mm512_kor(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kor(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kor(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kor(__mmask16 a, __mmask16 b);']"
KORTESTW,"['__mmask16 _mm512_kortest[cz](__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kortest[cz](__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kortest[cz](__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kortest[cz](__mmask16 a, __mmask16 b);']"
Compiler,"['auto generates KSHIFTLW when needed.', 'auto generates KSHIFTLW when needed.', 'auto generates KSHIFTLW when needed.', 'auto generates KSHIFTLW when needed.', 'auto generates KSHIFTRW when needed.', 'auto generates KSHIFTRW when needed.', 'auto generates KSHIFTRW when needed.', 'auto generates KSHIFTRW when needed.']"
KUNPCKBW,"['__mmask16 _mm512_kunpackb(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kunpackb(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kunpackb(__mmask16 a, __mmask16 b);']"
KXNORW,"['__mmask16 _mm512_kxnor(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kxnor(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kxnor(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kxnor(__mmask16 a, __mmask16 b);']"
KXORW,"['__mmask16 _mm512_kxor(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kxor(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kxor(__mmask16 a, __mmask16 b);', '__mmask16 _mm512_kxor(__mmask16 a, __mmask16 b);']"
LDDQU,['__m128i _mm_lddqu_si128 (__m128i * p);']
_mm_setcsr(unsigned,['int i)']
LOADIWKEY,"['void _mm_loadiwkey(unsigned int ctl, __m128i intkey, __m128i enkey_lo, __m128i enkey_hi);']"
LZCNT,['unsigned __int32 _lzcnt_u32(unsigned __int32 src);']
VMAXPD,"['__m512d _mm512_max_pd( __m512d a, __m512d b);']"
VMAXPS,"['__m512 _mm512_max_ps( __m512 a, __m512 b);']"
VMAXSD,"['__m128d _mm_max_round_sd( __m128d a, __m128d b, int);']"
VMAXSS,"['__m128 _mm_max_round_ss( __m128 a, __m128 b, int);']"
VMINPD,"['__m512d _mm512_min_pd( __m512d a, __m512d b);']"
VMINPS,"['__m512 _mm512_min_ps( __m512 a, __m512 b);']"
VMINSD,"['__m128d _mm_min_round_sd(__m128d a, __m128d b, int);']"
VMINSS,"['__m128 _mm_min_round_ss( __m128 a, __m128 b, int);']"
MONITOR,"['void _mm_monitor(void const *p, unsigned extensions,unsigned hints)']"
VMOVAPD,['__m512d _mm512_load_pd( void * m);']
VMOVAPS,['__m512 _mm512_load_ps( void * m);']
MOVD,"['__m64 _mm_cvtsi32_si64 (int i )', '__m64 _mm_cvtsi32_si64 (int i )']"
VMOVDDUP,['__m512d _mm512_movedup_pd( __m512d a);']
MOVDIR64B,"['void _movdir64b(void *dst, const void* src)']"
MOVDIRI,"['void _directstoreu_u32(void *dst, uint32_t val)']"
MOVDQ2Q,['__m64 _mm_movepi64_pi64 ( __m128i a)']
VMOVDQA32,"['__m512i _mm512_load_epi32( void * sa);', '__m512i _mm512_load_epi32( void * sa);', '__m512i _mm512_load_epi32( void * sa);']"
VMOVDQU16,"['__m512i _mm512_mask_loadu_epi16(__m512i s, __mmask32 k, void * sa);', '__m512i _mm512_mask_loadu_epi16(__m512i s, __mmask32 k, void * sa);', '__m512i _mm512_mask_loadu_epi16(__m512i s, __mmask32 k, void * sa);', '__m512i _mm512_mask_loadu_epi16(__m512i s, __mmask32 k, void * sa);', '__m512i _mm512_mask_loadu_epi16(__m512i s, __mmask32 k, void * sa);']"
MOVHLPS,"['__m128 _mm_movehl_ps(__m128 a, __m128 b)']"
MOVHPD,"['__m128d _mm_loadh_pd ( __m128d a, double *p)']"
MOVHPS,"['__m128 _mm_loadh_pi ( __m128 a, __m64 *p)']"
MOVLHPS,"['__m128 _mm_movelh_ps(__m128 a, __m128 b)']"
MOVLPD,"['__m128d _mm_loadl_pd ( __m128d a, double *p)']"
MOVLPS,"['__m128 _mm_loadl_pi ( __m128 a, __m64 *p)']"
MOVMSKPD,['int _mm_movemask_pd ( __m128d a)']
int,['_mm_movemask_ps(__m128 a)']
VMOVNTDQ,"['void _mm512_stream_si512(void * p, __m512i a);']"
VMOVNTDQA,['__m512i _mm512_stream_load_si512(__m512i const* p);']
MOVNTI,"['void _mm_stream_si32 (int *p, int a)']"
VMOVNTPD,"['void _mm512_stream_pd(double * p, __m512d a);']"
VMOVNTPS,"['void _mm512_stream_ps(float * p, __m512d a);']"
MOVNTQ,"['void _mm_stream_pi(__m64 * p, __m64 a)']"
VMOVQ,['__m128i _mm_loadu_si64( void * s);']
MOVQ2DQ__128i,['_mm_movpi64_epi64 ( __m64 a)']
VMOVSD,"['__m128d _mm_mask_load_sd(__m128d s, __mmask8 k, double * p);']"
VMOVSHDUP,['__m512 _mm512_movehdup_ps( __m512 a);']
VMOVSLDUP,['__m512 _mm512_moveldup_ps( __m512 a);']
VMOVSS,"['__m128 _mm_mask_load_ss(__m128 s, __mmask8 k, float * p);']"
VMOVUPD,['__m512d _mm512_loadu_pd( void * s);']
VMOVUPS,['__m512 _mm512_loadu_ps( void * s);']
(V)MPSADBW,"['__m128i _mm_mpsadbw_epu8 (__m128i s1, __m128i s2, const int mask);']"
VMULPD,"['__m512d _mm512_mul_pd( __m512d a, __m512d b);']"
VMULPS,"['__m512 _mm512_mul_ps( __m512 a, __m512 b);']"
VMULSD,"['__m128d _mm_mask_mul_sd(__m128d s, __mmask8 k, __m128d a, __m128d b);']"
VMULSS,"['__m128 _mm_mask_mul_ss(__m128 s, __mmask8 k, __m128 a, __m128 b);']"
Auto-generated,"['from high-level language when possible. unsigned int mulx_u32(unsigned int a, unsigned int b, unsigned int * hi);']"
MWAIT,"['void _mm_mwait(unsigned extensions, unsigned hints)']"
VORPD,"['__m512d _mm512_or_pd ( __m512d a, __m512d b);']"
VORPS,"['__m512 _mm512_or_ps ( __m512 a, __m512 b);']"
VPABSB__m512i,"['_mm512_abs_epi8 ( __m512i a)', '_mm512_abs_epi8 ( __m512i a)', '_mm512_abs_epi8 ( __m512i a)', '_mm512_abs_epi8 ( __m512i a)']"
VPACKSSDW__m512i,"['_mm512_packs_epi32(__m512i m1, __m512i m2);', '_mm512_packs_epi32(__m512i m1, __m512i m2);']"
VPACKUSDW__m512i,"['_mm512_packus_epi32(__m512i m1, __m512i m2);']"
VPACKUSWB,"['__m512i _mm512_packus_epi16(__m512i m1, __m512i m2);']"
VPADDB__m512i,"['_mm512_add_epi8 ( __m512i a, __m512i b)', '_mm512_add_epi8 ( __m512i a, __m512i b)', '_mm512_add_epi8 ( __m512i a, __m512i b)', '_mm512_add_epi8 ( __m512i a, __m512i b)']"
PADDSB,"['__m64 _mm_adds_pi8(__m64 m1, __m64 m2)', '__m64 _mm_adds_pi8(__m64 m1, __m64 m2)']"
PADDUSB,"['__m64 _mm_adds_pu8(__m64 m1, __m64 m2)', '__m64 _mm_adds_pu8(__m64 m1, __m64 m2)']"
PALIGNR,"['__m64 _mm_alignr_pi8 (__m64 a, __m64 b, int n)']"
VPANDD,"['__m512i _mm512_and_epi32( __m512i a, __m512i b);']"
VPANDND,"['__m512i _mm512_andnot_epi32( __m512i a, __m512i b);']"
VPAVGB,"['__m512i _mm512_avg_epu8( __m512i a, __m512i b);', '__m512i _mm512_avg_epu8( __m512i a, __m512i b);']"
(V)PBLENDVB,"['__m128i _mm_blendv_epi8 (__m128i v1, __m128i v2, __m128i mask);']"
(V)PBLENDW,"['__m128i _mm_blend_epi16 (__m128i v1, __m128i v2, const int mask);']"
(V)PCLMULQDQ,"['__m128i _mm_clmulepi64_si128 (__m128i, __m128i, const int)']"
VPCMPEQB,"['__mmask64 _mm512_cmpeq_epi8_mask(__m512i a, __m512i b);', '__mmask64 _mm512_cmpeq_epi8_mask(__m512i a, __m512i b);', '__mmask64 _mm512_cmpeq_epi8_mask(__m512i a, __m512i b);']"
VPCMPEQQ,"['__mmask8 _mm512_cmpeq_epi64_mask( __m512i a, __m512i b);']"
VPCMPGTB,"['__mmask64 _mm512_cmpgt_epi8_mask(__m512i a, __m512i b);', '__mmask64 _mm512_cmpgt_epi8_mask(__m512i a, __m512i b);', '__mmask64 _mm512_cmpgt_epi8_mask(__m512i a, __m512i b);']"
VPCMPGTQ,"['__mmask8 _mm512_cmpgt_epi64_mask( __m512i a, __m512i b);']"
PDEP,"['unsigned __int32 _pdep_u32(unsigned __int32 src, unsigned __int32 mask);']"
PEXT,"['unsigned __int32 _pext_u32(unsigned __int32 src, unsigned __int32 mask);']"
PEXTRB,"['int _mm_extract_epi8 (__m128i src, const int ndx);', 'int _mm_extract_epi8 (__m128i src, const int ndx);', 'int _mm_extract_epi8 (__m128i src, const int ndx);']"
PEXTRW,"['int _mm_extract_pi16 (__m64 a, int n)']"
PHADDW,"['__m64 _mm_hadd_pi16 (__m64 a, __m64 b)', '__m64 _mm_hadd_pi16 (__m64 a, __m64 b)']"
PHADDSW,"['__m64 _mm_hadds_pi16 (__m64 a, __m64 b)']"
PHMINPOSUW,['__m128i _mm_minpos_epu16( __m128i packed_words);']
PHSUBW,"['__m64 _mm_hsub_pi16 (__m64 a, __m64 b)', '__m64 _mm_hsub_pi16 (__m64 a, __m64 b)']"
PHSUBSW,"['__m64 _mm_hsubs_pi16 (__m64 a, __m64 b)']"
PINSRB,"['__m128i _mm_insert_epi8 (__m128i s1, int s2, const int ndx);', '__m128i _mm_insert_epi8 (__m128i s1, int s2, const int ndx);', '__m128i _mm_insert_epi8 (__m128i s1, int s2, const int ndx);']"
PINSRW,"['__m64 _mm_insert_pi16 (__m64 a, int d, int n)']"
VPMADDUBSW,"['__m512i _mm512_maddubs_epi16( __m512i a, __m512i b);']"
VPMADDWD,"['__m512i _mm512_madd_epi16( __m512i a, __m512i b);']"
VPMAXSB,"['__m512i _mm512_max_epi8( __m512i a, __m512i b);', '__m512i _mm512_max_epi8( __m512i a, __m512i b);', '__m512i _mm512_max_epi8( __m512i a, __m512i b);', '__m512i _mm512_max_epi8( __m512i a, __m512i b);']"
VPMAXUB,"['__m512i _mm512_max_epu8( __m512i a, __m512i b);', '__m512i _mm512_max_epu8( __m512i a, __m512i b);']"
VPMAXUD,"['__m512i _mm512_max_epu32( __m512i a, __m512i b);', '__m512i _mm512_max_epu32( __m512i a, __m512i b);']"
VPMINSB,"['__m512i _mm512_min_epi8( __m512i a, __m512i b);', '__m512i _mm512_min_epi8( __m512i a, __m512i b);']"
VPMINSD,"['__m512i _mm512_min_epi32( __m512i a, __m512i b);', '__m512i _mm512_min_epi32( __m512i a, __m512i b);']"
VPMINUB,"['__m512i _mm512_min_epu8( __m512i a, __m512i b);', '__m512i _mm512_min_epu8( __m512i a, __m512i b);']"
VPMINUD,"['__m512i _mm512_min_epu32( __m512i a, __m512i b);', '__m512i _mm512_min_epu32( __m512i a, __m512i b);']"
PMOVMSKB,['int _mm_movemask_pi8(__m64 a)']
VPMOVSXBW,['__m512i _mm512_cvtepi8_epi16(__m512i a);']
VPMOVZXBW,['__m512i _mm512_cvtepu8_epi16(__m256i a);']
VPMULDQ,"['__m512i _mm512_mul_epi32(__m512i a, __m512i b);']"
VPMULHRSW,"['__m512i _mm512_mulhrs_epi16(__m512i a, __m512i b);']"
VPMULHUW,"['__m512i _mm512_mulhi_epu16(__m512i a, __m512i b);']"
VPMULHW,"['__m512i _mm512_mulhi_epi16(__m512i a, __m512i b);']"
VPMULLD,"['__m512i _mm512_mullo_epi32(__m512i a, __m512i b);', '__m512i _mm512_mullo_epi32(__m512i a, __m512i b);']"
VPMULLW,"['__m512i _mm512_mullo_epi16(__m512i a, __m512i b);']"
VPMULUDQ,"['__m512i _mm512_mul_epu32(__m512i a, __m512i b);']"
POPCNT,['int _mm_popcnt_u32(unsigned int a);']
VPORD,"['__m512i _mm512_or_epi32(__m512i a, __m512i b);']"
VPSADBW,"['__m512i _mm512_sad_epu8( __m512i a, __m512i b)']"
VPSHUFB,"['__m512i _mm512_shuffle_epi8(__m512i a, __m512i b);']"
VPSHUFD,"['__m512i _mm512_shuffle_epi32(__m512i a, int n );']"
VPSHUFHW,"['__m512i _mm512_shufflehi_epi16(__m512i a, int n);']"
VPSHUFLW,"['__m512i _mm512_shufflelo_epi16(__m512i a, int n);']"
PSHUFW,"['__m64 _mm_shuffle_pi16(__m64 a, int n)']"
PSIGNB,"['__m64 _mm_sign_pi8 (__m64 a, __m64 b)', '__m64 _mm_sign_pi8 (__m64 a, __m64 b)', '__m64 _mm_sign_pi8 (__m64 a, __m64 b)']"
VPSLLD,"['__m512i _mm512_slli_epi32(__m512i a, unsigned int imm);', '__m512i _mm512_slli_epi32(__m512i a, unsigned int imm);', '__m512i _mm512_slli_epi32(__m512i a, unsigned int imm);']"
(V)PSLLDQ,"['__m128i _mm_slli_si128 ( __m128i a, int imm)']"
VPSRAD,"['__m512i _mm512_srai_epi32(__m512i a, unsigned int imm);', '__m512i _mm512_srai_epi32(__m512i a, unsigned int imm);', '__m512i _mm512_srai_epi32(__m512i a, unsigned int imm);']"
VPSRLD,"['__m512i _mm512_srli_epi32(__m512i a, unsigned int imm);', '__m512i _mm512_srli_epi32(__m512i a, unsigned int imm);', '__m512i _mm512_srli_epi32(__m512i a, unsigned int imm);']"
(V)PSRLDQ,"['__m128i _mm_srli_si128 ( __m128i a, int imm)']"
VPSUBB,"['__m512i _mm512_sub_epi8(__m512i a, __m512i b);', '__m512i _mm512_sub_epi8(__m512i a, __m512i b);', '__m512i _mm512_sub_epi8(__m512i a, __m512i b);']"
VPSUBQ,"['__m512i _mm512_sub_epi64(__m512i a, __m512i b);']"
VPSUBSB,"['__m512i _mm512_subs_epi8(__m512i a, __m512i b);', '__m512i _mm512_subs_epi8(__m512i a, __m512i b);']"
VPSUBUSB,"['__m512i _mm512_subs_epu8(__m512i a, __m512i b);', '__m512i _mm512_subs_epu8(__m512i a, __m512i b);']"
PTEST,"['int _mm_testz_si128 (__m128i s1, __m128i s2);']"
VPUNPCKHBW,"['__m512i _mm512_unpackhi_epi8(__m512i a, __m512i b);', '__m512i _mm512_unpackhi_epi8(__m512i a, __m512i b);', '__m512i _mm512_unpackhi_epi8(__m512i a, __m512i b);', '__m512i _mm512_unpackhi_epi8(__m512i a, __m512i b);']"
VPUNPCKLBW,"['__m512i _mm512_unpacklo_epi8(__m512i a, __m512i b);', '__m512i _mm512_unpacklo_epi8(__m512i a, __m512i b);', '__m512i _mm512_unpacklo_epi8(__m512i a, __m512i b);', '__m512i _mm512_unpacklo_epi8(__m512i a, __m512i b);']"
VPXORD,"['__m512i _mm512_xor_epi32(__m512i a, __m512i b)']"
RCCPS,['__m128 _mm_rcp_ps(__m128 a)']
RCPSS,['__m128 _mm_rcp_ss(__m128 a)']
RDFSBASE,"['unsigned int _readfsbase_u32(void );', 'unsigned int _readfsbase_u32(void );']"
RDPKRU,['uint32_t _rdpkru_u32(void);']
RDRAND,['int _rdrand16_step( unsigned short * );']
RDSEED,['int _rdseed16_step( unsigned short * );']
RDSSPD__int32,"['_rdsspd_i32(void);', '_rdsspd_i32(void);']"
__m128,"['_mm_round_pd(__m128d s1, int iRoundMode);', '_mm_round_ps(__m128 s1, int iRoundMode);']"
ROUNDSD,"['__m128d mm_round_sd(__m128d dst, __m128d s1, int iRoundMode);']"
ROUNDSS,"['__m128 mm_round_ss(__m128 dst, __m128 s1, int iRoundMode);']"
RSQRTPS,['__m128 _mm_rsqrt_ps(__m128 a)']
RSQRTSS,['__m128 _mm_rsqrt_ss(__m128 a)']
RSTORSSP,['void _rstorssp(void *);']
SAVEPREVSSP,['void _saveprevssp(void);']
SBB,"['extern unsigned char _subborrow_u8(unsigned char c_in, unsigned char src1, unsigned char src2, unsigned char *diff_out);']"
SERIALIZE,['void _serialize(void);']
SETSSBSYvoid,['_setssbsy(void);']
SHA1MSG1,"['__m128i _mm_sha1msg1_epu32(__m128i, __m128i);']"
SHA1MSG2,"['__m128i _mm_sha1msg2_epu32(__m128i, __m128i);']"
SHA1NEXTE,"['__m128i _mm_sha1nexte_epu32(__m128i, __m128i);']"
SHA1RNDS4,"['__m128i _mm_sha1rnds4_epu32(__m128i, __m128i, const int);']"
SHA256MSG1,"['__m128i _mm_sha256msg1_epu32(__m128i, __m128i);']"
SHA256MSG2,"['__m128i _mm_sha256msg2_epu32(__m128i, __m128i);']"
SHA256RNDS2,"['__m128i _mm_sha256rnds2_epu32(__m128i, __m128i, __m128i);']"
VSHUFPD,"['__m512d _mm512_shuffle_pd(__m512d a, __m512d b, int imm);']"
VSHUFPS,"['__m512 _mm512_shuffle_ps(__m512 a, __m512 b, int imm);']"
VSQRTPD,"['__m512d _mm512_sqrt_round_pd(__m512d a, int r);']"
VSQRTPS,"['__m512 _mm512_sqrt_round_ps(__m512 a, int r);']"
VSQRTSD,"['__m128d _mm_sqrt_round_sd(__m128d a, __m128d b, int r);']"
VSQRTSS,"['__m128 _mm_sqrt_round_ss(__m128 a, __m128 b, int r);']"
STTILECFGvoid,['_tile_storeconfig(void *);']
VSUBPD,"['__m512d _mm512_sub_pd (__m512d a, __m512d b);']"
VSUBPS,"['__m512 _mm512_sub_ps (__m512 a, __m512 b);']"
VSUBSD,"['__m128d _mm_mask_sub_sd (__m128d s, __mmask8 k, __m128d a, __m128d b);']"
VSUBSS,"['__m128 _mm_mask_sub_ss (__m128 s, __mmask8 k, __m128 a, __m128 b);']"
TDPBF16PS,"['void _tile_dpbf16ps(__tile dst, __tile src1, __tile src2);']"
TDPBSSD,"['void _tile_dpbssd(__tile dst, __tile src1, __tile src2);', 'void _tile_dpbssd(__tile dst, __tile src1, __tile src2);', 'void _tile_dpbssd(__tile dst, __tile src1, __tile src2);', 'void _tile_dpbssd(__tile dst, __tile src1, __tile src2);']"
TILELOADD,"['void _tile_loadd(__tile dst, const void *base, int stride);', 'void _tile_loadd(__tile dst, const void *base, int stride);']"
TILERELEASE,['void _tile_release(void);']
TILESTORED,"['void _tile_stored(__tile src, void *base, int stride);']"
TILEZERO,['void _tile_zero(__tile dst);']
TPAUSE,"['uint8_t _tpause(uint32_t control, uint64_t counter);']"
TZCNT,['unsigned __int32 _tzcnt_u32(unsigned __int32 src);']
VUCOMISD,"['int _mm_comi_round_sd(__m128d a, __m128d b, int imm, int sae);']"
VUCOMISS,"['int _mm_comi_round_ss(__m128 a, __m128 b, int imm, int sae);']"
UMONITOR,['void _umonitor(void *address);']
UMWAIT,"['uint8_t _umwait(uint32_t control, uint64_t counter);']"
VUNPCKHPD,"['__m512d _mm512_unpackhi_pd( __m512d a, __m512d b);']"
VUNPCKHPS,"['__m512 _mm512_unpackhi_ps( __m512 a, __m512 b);']"
VUNPCKLPD,"['__m512d _mm512_unpacklo_pd( __m512d a, __m512d b);']"
VUNPCKLPS,"['__m512 _mm512_unpacklo_ps(__m512 a, __m512 b);']"
VFMADDRND231PD,"['__m128d _mm_fmaddround_pd (__m128d a, __m128d b, __m128d c, const int ctrl);']"
VGATHERDPD:,"['__m128d _mm_i32gather_pd (double const * base, __m128i index, const int scale);', '__m128d _mm_i32gather_pd (double const * base, __m128i index, const int scale);']"
VGATHERDPS:,"['__m128 _mm_i32gather_ps (float const * base, __m128i index, const int scale);', '__m128 _mm_i32gather_ps (float const * base, __m128i index, const int scale);']"
__m256,"['_mm256_maskload_ps(float const *a, __m256i mask)']"
VPBLENDD:,"['__m128i _mm_blend_epi32 (__m128i v1, __m128i v2, const int mask)']"
VPERM2F128:,"['__m256 _mm256_permute2f128_ps (__m256 a, __m256 b, int control)']"
VPERM2I128:,"['__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, int control)']"
VPGATHERDD:,"['__m128i _mm_i32gather_epi32 (int const * base, __m128i index, const int scale);', '__m128i _mm_i32gather_epi32 (int const * base, __m128i index, const int scale);']"
VPGATHERDQ:,"['__m128i _mm_i32gather_epi64 (__int64 const * base, __m128i index, const int scale);', '__m128i _mm_i32gather_epi64 (__int64 const * base, __m128i index, const int scale);']"
VPMASKMOVD:,"['__m256i _mm256_maskload_epi32(int const *a, __m256i mask)']"
VTESTPS,"['int _mm256_testz_ps (__m256 s1, __m256 s2);', 'int _mm256_testz_ps (__m256 s1, __m256 s2);']"
VZEROALL:,['_mm256_zeroall()']
VZEROUPPER:,['_mm256_zeroupper()']
WRFSBASE,"['void _writefsbase_u32( unsigned int );', 'void _writefsbase_u32( unsigned int );']"
WRPKRU,['void _wrpkru(uint32_t);']
WRSSD,"['void _wrssd(__int32, void *);', 'void _wrssd(__int32, void *);']"
WRUSSD,"['void _wrussd(__int32, void *);', 'void _wrussd(__int32, void *);']"
XABORT,['void _xabort( unsigned int);']
XBEGIN,['unsigned int _xbegin( void );']
XEND,['void _xend( void );']
XGETBV,['unsigned __int64 _xgetbv( unsigned int);']
XRSTOR,"['void _xrstor( void * , unsigned __int64);']"
XRSTORS,"['void _xrstors( void * , unsigned __int64);']"
XSAVE,"['void _xsave( void * , unsigned __int64);']"
XSAVEC,"['void _xsavec( void * , unsigned __int64);']"
XSAVEOPT,"['void _xsaveopt( void * , unsigned __int64);']"
XSAVES,"['void _xsaves( void * , unsigned __int64);']"
XSETBV,"['void _xsetbv( unsigned int, unsigned __int64);']"
XTEST,['int _xtest( void );']
